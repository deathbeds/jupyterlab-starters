/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A collection of JSON types for configuring and operating Starters
 */
export type JupyterStartersJSON =
  | AResponseForAnStartersRequest
  | AResponseForStartRequest;
/**
 * Starters currently using a process/resource
 */
export type RunningStarters = string[];
export type Starter =
  | ACopyStarter
  | AContentsStarter
  | ACopyStarterWithACustomDestination
  | APythonStarter
  | ANotebookStarter;
export type ACopyStarter = StarterMetadata & SourceOfContents;
/**
 * category to place the starter card under in Launcher
 */
export type Category = string;
/**
 * canonical name for the command
 */
export type CommandID = string;
/**
 * [JupyterLab commands](https://jupyterlab.readthedocs.io/en/stable/developer/extension_points.html#commands) to run after the Starter has completed
 */
export type Commands = JupyterLabCommand[];
/**
 * short, plain-text description of the intent of the Starter
 */
export type Description = string;
/**
 * [SVG](https://developer.mozilla.org/en-US/docs/Web/SVG) string to use in Launcher cards and tab icons
 */
export type Icon = string;
/**
 * [glob-style patterns](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.match) for folders and files exclude from copying, with * for wildcards
 */
export type IgnoreFiles = string[];
/**
 * human-readable, plain-text description used in UI labels and tab titles
 */
export type Label = string;
/**
 * rank of the launcher card within its category, lowest value will appear first
 */
export type Rank = number;
/**
 * name of a python module installed in the `notebook` environment to prepent to `src`
 */
export type StarterPythonSource = string;
/**
 * path to the starter. may be absolute or relative to the `notebook` launch directory (or `py_src`)
 */
export type StarterSource = string;
/**
 * A starter that contains templated Jupyter content
 */
export type AContentsStarter = StarterMetadata1 & AStarterContentsFolder;
export type StarterContentAny = {
  /**
   * A filename that may contain jinja/nunjucks template strings populated with the body
   */
  name?: string;
  [k: string]: any;
} & (ContentFolder | ContentFile);
export type ContentFile = JupyterContentsFile & (TextFile | JSONFile);
export type AnArray = any[];
export type ACopyStarterWithACustomDestination = CopyStarterProperties;
/**
 * All the properties from a Copy Starter
 */
export type CopyStarterProperties = StarterMetadata & SourceOfContents;
/**
 * Invokes an importable python function (multiple times)
 */
export type APythonStarter = StarterMetadata2;
/**
 * Uses a notebook as both the configuration object (in `#/metadata/jupyter-starters`) and execution
 */
export type ANotebookStarter = StarterMetadata3 & SourceOfNotebook;
/**
 * The version of the Jupyter Starters API
 */
export type APIVersion = '3';
/**
 * copy files after starter is run (irrespective of status) if `true`
 */
export type ForceCopy = boolean;
export type ErrorText = string;
/**
 * a listing of system and user errors created during a starter
 */
export type Errors = ErrorText[];
/**
 * the canonical name of the starter
 */
export type Name = string;
/**
 * the API path (`/` delimited) to which files will be written
 */
export type APIPath = string;
/**
 * the current definition of the starter: may change during multi-step starters
 */
export type Starter1 =
  | ACopyStarter
  | AContentsStarter
  | ACopyStarterWithACustomDestination
  | APythonStarter
  | ANotebookStarter;
/**
 * the current state of the Starter
 */
export type Status = 'error' | 'continuing' | 'done';

export interface AResponseForAnStartersRequest {
  running?: RunningStarters;
  starters: NamedStarters;
  version: APIVersion;
  [k: string]: any;
}
/**
 * Starters keyed by their API/URL names
 */
export interface NamedStarters {
  [k: string]: Starter;
}
/**
 * Common starter fields
 */
export interface StarterMetadata {
  category?: Category;
  commands?: Commands;
  description: Description;
  icon?: Icon;
  ignore?: IgnoreFiles;
  label: Label;
  rank?: Rank;
  schema?: JSONSchema;
  uiSchema?: UISchema;
  [k: string]: any;
}
export interface JupyterLabCommand {
  args?: Arguments;
  id: CommandID;
  [k: string]: any;
}
/**
 * optional values provided to the command when executed
 */
export interface Arguments {
  [k: string]: any;
}
/**
 * [Draft 7 JSON Schema](https://json-schema.org/understanding-json-schema) that generates a form like this one, which must validate the user's data. Description fields may include markdown
 */
export interface JSONSchema {
  [k: string]: any;
}
/**
 * [react-jsonschema-form `uiSchema`](https://react-jsonschema-form.readthedocs.io/en/latest/form-customization/#the-uischema-object) for customizing the selection of widgets
 */
export interface UISchema {
  [k: string]: any;
}
/**
 * Where to find the contents to copy
 */
export interface SourceOfContents {
  py_src?: StarterPythonSource;
  src: StarterSource;
  [k: string]: any;
}
/**
 * Common starter fields
 */
export interface StarterMetadata1 {
  category?: Category;
  commands?: Commands;
  description: Description;
  icon?: Icon;
  ignore?: IgnoreFiles;
  label: Label;
  rank?: Rank;
  schema?: JSONSchema;
  uiSchema?: UISchema;
  [k: string]: any;
}
/**
 * Fields that fully describe a single file or tree of Jupyter content
 */
export interface AStarterContentsFolder {
  content: StarterContentAny;
  [k: string]: any;
}
export interface ContentFolder {
  [k: string]: any;
}
export interface JupyterContentsFile {
  mimetype: string;
  type: 'file';
  [k: string]: any;
}
export interface TextFile {
  content?: string;
  format?: 'text' | 'base64';
  [k: string]: any;
}
export interface JSONFile {
  content?: AnArray | AnObject;
  format?: 'json';
  [k: string]: any;
}
export interface AnObject {
  [k: string]: any;
}
/**
 * Common starter fields
 */
export interface StarterMetadata2 {
  category?: Category;
  commands?: Commands;
  description: Description;
  icon?: Icon;
  ignore?: IgnoreFiles;
  label: Label;
  rank?: Rank;
  schema?: JSONSchema;
  uiSchema?: UISchema;
  [k: string]: any;
}
/**
 * Common starter fields
 */
export interface StarterMetadata3 {
  category?: Category;
  commands?: Commands;
  description: Description;
  icon?: Icon;
  ignore?: IgnoreFiles;
  label: Label;
  rank?: Rank;
  schema?: JSONSchema;
  uiSchema?: UISchema;
  [k: string]: any;
}
/**
 * Where to find the notebook
 */
export interface SourceOfNotebook {
  py_src?: StarterPythonSource;
  src: StarterSource;
  [k: string]: any;
}
export interface AResponseForStartRequest {
  body: Body;
  copy?: ForceCopy;
  errors?: Errors;
  name: Name;
  path: APIPath;
  starter: Starter1;
  status: Status;
  [k: string]: any;
}
/**
 * user data populated by the client
 */
export interface Body {
  [k: string]: any;
}
